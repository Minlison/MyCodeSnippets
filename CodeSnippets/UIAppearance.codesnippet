<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>DELE UIAppearance</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>ClassImplementation</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>// This file is generated by dnsip, a tiny utility that extracts 
                 // all delegate methods from the UIKit framework. You find it on 
                // GitHub at https://github.com/Tintenklecks/IBDelegateCodesippets

#pragma mark - PROTOCOL UIAppearanceContainer 

#pragma mark - PROTOCOL UIAppearance 
// /* To customize the appearance of all instances of a class, send the relevant appearance modification messages to the appearance proxy for the class. For example, to modify the bar tint color for all UINavigationBar instances:
// [[UINavigationBar appearance] setBarTintColor:myColor]{ }

// Note for iOS7: On iOS7 the tintColor property has moved to UIView, and now has special inherited behavior described in UIView.h.
// This inherited behavior can conflict with the appearance proxy, and therefore tintColor is now disallowed with the appearance proxy.
// */
// + (instancetype)appearance{ }

// /* To customize the appearances for instances of a class contained within an instance of a container class, or instances in a hierarchy, use +appearanceWhenContainedIn: for the appropriate appearance proxy. For example:

// [[UINavigationBar appearanceWhenContainedIn:[UISplitViewController class], nil] setBarTintColor:myColor]{ }
// [[UINavigationBar appearanceWhenContainedIn:[UITabBarController class], [UISplitViewController class], nil] setBarTintColor:myTabbedNavBarColor]{ }

// In any given view hierarchy the outermost appearance proxy wins. Specificity (depth of the chain) is the tie-breaker.

// In other words, the containment statement is treated as a partial ordering. Given a concrete ordering (actual subview hierarchy), we select the partial ordering that is the first unique match when reading the actual hierarchy from the window down.

// This method will throw an exception for anything in the var-args list that is not a Class &lt;UIAppearanceContainer&gt;.
// */
// + (instancetype)appearanceWhenContainedIn:(Class &lt;UIAppearanceContainer&gt;)ContainerClass, ... NS_REQUIRES_NIL_TERMINATION{ }

// + (instancetype)appearanceForTraitCollection:(UITraitCollection *)trait NS_AVAILABLE_IOS(8_0){ }
// + (instancetype)appearanceForTraitCollection:(UITraitCollection *)trait whenContainedIn:(Class &lt;UIAppearanceContainer&gt;)ContainerClass, ... NS_REQUIRES_NIL_TERMINATION NS_AVAILABLE_IOS(8_0){ }
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>ADC44201-A793-4F36-AD55-86D9AA840502</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Objective-C</string>
	<key>IDECodeSnippetSummary</key>
	<string>Delegate with all methods of UIAppearance</string>
	<key>IDECodeSnippetTitle</key>
	<string>Delegate for UIAppearance</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
