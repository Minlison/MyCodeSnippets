<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>DELE UIViewControllerTransitioningDelegate</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>ClassImplementation</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>// This file is generated by dnsip, a tiny utility that extracts 
                 // all delegate methods from the UIKit framework. You find it on 
                // GitHub at https://github.com/Tintenklecks/IBDelegateCodesippets

#pragma mark - PROTOCOL UIViewControllerContextTransitioning 

// The view in which the animated transition should take place.
// - (UIView *)containerView{ }

// Most of the time this is YES. For custom transitions that use the new UIModalPresentationCustom
// presentation type we will invoke the animateTransition: even though the transition should not be
// animated. This allows the custom transition to add or remove subviews to the container view.
// - (BOOL)isAnimated{ }

// - (BOOL)isInteractive{ } // This indicates whether the transition is currently interactive.

// - (BOOL)transitionWasCancelled{ }

// - (UIModalPresentationStyle)presentationStyle{ }

// It only makes sense to call these from an interaction controller that
// conforms to the UIViewControllerInteractiveTransitioning protocol and was
// vended to the system by a container view controller's delegate or, in the case
// of a present or dismiss, the transitioningDelegate.
// - (void)updateInteractiveTransition:(CGFloat)percentComplete{ }
// - (void)finishInteractiveTransition{ }
// - (void)cancelInteractiveTransition{ }

// This must be called whenever a transition completes (or is cancelled.)
// Typically this is called by the object conforming to the
// UIViewControllerAnimatedTransitioning protocol that was vended by the transitioning
// delegate.  For purely interactive transitions it should be called by the
// interaction controller. This method effectively updates internal view
// controller state at the end of the transition.
// - (void)completeTransition:(BOOL)didComplete{ }


// Currently only two keys are defined by the
// system - UITransitionContextToViewControllerKey, and
// UITransitionContextFromViewControllerKey.
// Animators should not directly manipulate a view controller's views and should
// use viewForKey: to get views instead.
// - (UIViewController *)viewControllerForKey:(NSString *)key{ }

// Currently only two keys are defined by the system -
// UITransitionContextFromViewKey, and UITransitionContextToViewKey
// viewForKey: may return nil which would indicate that the animator should not
// manipulate the associated view controller's view.
// - (UIView *)viewForKey:(NSString *)key NS_AVAILABLE_IOS(8_0){ }

// - (CGAffineTransform)targetTransform NS_AVAILABLE_IOS(8_0){ }

// The frame's are set to CGRectZero when they are not known or
// otherwise undefined.  For example the finalFrame of the
// fromViewController will be CGRectZero if and only if the fromView will be
// removed from the window at the end of the transition. On the other
// hand, if the finalFrame is not CGRectZero then it must be respected
// at the end of the transition.
// - (CGRect)initialFrameForViewController:(UIViewController *)vc{ }
// - (CGRect)finalFrameForViewController:(UIViewController *)vc{ }
#pragma mark - PROTOCOL UIViewControllerAnimatedTransitioning 

// This is used for percent driven interactive transitions, as well as for container controllers that have companion animations that might need to
// synchronize with the main animation.
// - (NSTimeInterval)transitionDuration:(id &lt;UIViewControllerContextTransitioning&gt;)transitionContext{ }
// This method can only  be a nop if the transition is interactive and not a percentDriven interactive transition.
// - (void)animateTransition:(id &lt;UIViewControllerContextTransitioning&gt;)transitionContext{ }


#pragma mark - OPTIONAL methods for protocol UIViewControllerAnimatedTransitioning 

// This is a convenience and if implemented will be invoked by the system when the transition context's completeTransition: method is invoked.
// - (void)animationEnded:(BOOL) transitionCompleted{ }

#pragma mark - PROTOCOL UIViewControllerInteractiveTransitioning 
// - (void)startInteractiveTransition:(id &lt;UIViewControllerContextTransitioning&gt;)transitionContext{ }

#pragma mark - OPTIONAL methods for protocol UIViewControllerInteractiveTransitioning 
// - (CGFloat)completionSpeed{ }
// - (UIViewAnimationCurve)completionCurve{ }

#pragma mark - PROTOCOL UIViewControllerTransitioningDelegate 

#pragma mark - OPTIONAL methods for protocol UIViewControllerTransitioningDelegate 
// - (id &lt;UIViewControllerAnimatedTransitioning&gt;)animationControllerForPresentedController:(UIViewController *)presented presentingController:(UIViewController *)presenting sourceController:(UIViewController *)source{ }

// - (id &lt;UIViewControllerAnimatedTransitioning&gt;)animationControllerForDismissedController:(UIViewController *)dismissed{ }

// - (id &lt;UIViewControllerInteractiveTransitioning&gt;)interactionControllerForPresentation:(id &lt;UIViewControllerAnimatedTransitioning&gt;)animator{ }

// - (id &lt;UIViewControllerInteractiveTransitioning&gt;)interactionControllerForDismissal:(id &lt;UIViewControllerAnimatedTransitioning&gt;)animator{ }

// - (UIPresentationController *)presentationControllerForPresentedViewController:(UIViewController *)presented presentingViewController:(UIViewController *)presenting sourceViewController:(UIViewController *)source NS_AVAILABLE_IOS(8_0){ }
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>4977C7B4-8B50-4DA5-85DB-6DD501F0E391</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Objective-C</string>
	<key>IDECodeSnippetSummary</key>
	<string>Delegate with all methods of UIViewControllerTransitioningDelegate</string>
	<key>IDECodeSnippetTitle</key>
	<string>Delegate for UIViewControllerTransitioningDelegate</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
